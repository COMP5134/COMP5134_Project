<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="IndividualProject">
    <property environment="env"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>

    <!--variable-->
    <property name="build.dir" location="bin"/>
    <property name="dist.dir" location="dist"/>
    <property name="docs.dir" location="docs"/>
    <property name="src.dir" location="src"/>
                
    <path id="JUnit 4.libraryclasspath">
        <pathelement location="../../eclipse-java-indigo-SR1-win32/eclipse/plugins/org.junit_4.8.2.v4_8_2_v20110321-1705/junit.jar"/>
        <pathelement location="../../eclipse-java-indigo-SR1-win32/eclipse/plugins/org.hamcrest.core_1.1.0.v20090501071000.jar"/>
    </path>
    <path id="IndividualProject.classpath">
        <pathelement location="bin"/>
        <path refid="JUnit 4.libraryclasspath"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
           	
	<!-- Clean -->
	<target name="clean">
		<delete dir="$(build.dir)"/>
		<delete dir="$(dist.dir)"/>   
		<delete dir="$(docs.dir)"/>
	</target>

    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="IndividualProject.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="DecoratorTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="InidividualProject.DecoratorTest" todir="${junit.output.dir}"/>
            <classpath refid="IndividualProject.classpath"/>
        </junit>
    </target>
    <target name="FlavorTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="InidividualProject.FlavorTest" todir="${junit.output.dir}"/>
            <classpath refid="IndividualProject.classpath"/>
        </junit>
    </target>
    <target name="IceCreamDecoratorMakerTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="InidividualProject.IceCreamDecoratorMakerTest" todir="${junit.output.dir}"/>
            <classpath refid="IndividualProject.classpath"/>
        </junit>
    </target>
    <target name="IceCreamMakerTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="InidividualProject.IceCreamMakerTest" todir="${junit.output.dir}"/>
            <classpath refid="IndividualProject.classpath"/>
        </junit>
    </target>
    <target name="IndividualProject">
        <java classname="IndividualProject.IndividualProject" failonerror="true" fork="yes">
            <classpath refid="IndividualProject.classpath"/>
        </java>
    </target>
    <target name="InidividualProject (1)">
        <java classname="InidividualProject.InidividualProject" failonerror="true" fork="yes">
            <classpath refid="IndividualProject.classpath"/>
        </java>
    </target>
    <target name="InidividualProject">
        <java classname="IndividualProject.InidividualProject" failonerror="true" fork="yes">
            <classpath refid="IndividualProject.classpath"/>
        </java>
    </target>
    <target name="Main (1)">
        <java classname="InidividualProject.Main" failonerror="true" fork="yes">
            <classpath refid="IndividualProject.classpath"/>
        </java>
    </target>
    <target name="Main">
        <java classname="IndividualProject.Main" failonerror="true" fork="yes">
            <classpath refid="IndividualProject.classpath"/>
        </java>
    </target>
    <target name="POSSystem">
        <java classname="InidividualProject.POSSystem" failonerror="true" fork="yes">
            <classpath refid="IndividualProject.classpath"/>
        </java>
    </target>
    <target name="POSSystemTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="InidividualProject.POSSystemTest" todir="${junit.output.dir}"/>
            <classpath refid="IndividualProject.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
              	
	<!-- Creates Javadoc -->
	<target name="docs" depends="build-project">
         <javadoc packagenames="src" sourcepath="$(src.dir)" destdir="$(doc.dir)">
         	<fileset dir="$(src.dir)">
         		<include name="**" />
         	</fileset>
         </javadoc>
	</target>
              	
	<target name="jar" depends="build-project">
		<jar destfile="$(dist.dir)/test.jar" basedir="$(build.dir)">
			<manifest>
				<attribute name="Main-Class" value="test.Main" />
			</manifest>
		</jar>
	</target>
              	
</project>
